1. T (n) = 3T (n/2) + n 

Below is the solution:

a = 3, b = 2 and f(n) = n.
So c = log_b(a) = log_2(3), which is bigger than 1, and therefore the complexity is:
O(n^{log_2(3)}) = O(n^{1.58})


2. T (n) = 64T (n/8) − n^2(log n) 

Below is the solution:

T (n) = 64T (n/8) − n^2(log n) 
       =64 T(n/8) + n2log n-1
       =64 T(n/8) + n2log (1/n)
     	here nlogba = n log864 = n2
	now,  n2log(1/n) > n2

Then complexity will be O( n2log 1/n)

3.  T (n) = 2nT (n/2) + n^n 

Below is the solution:

Let us take n=2m. Then we have the recurrence
T(2m)=2T(2m−1)+2mlog2(2m)=2T(2m−1)+m2m
Calling T(2m) as f(m), we get that
f(m)=2f(m−1)+m2m=2(2f(m−2)+(m−1)2m−1)+m2m=4f(m−2)+(m−1)2m+m2m=4(2f(m−3)+(m−2)2m−2)+(m−1)2m+m2m=8f(m−3)+(m−2)2m+(m−1)2m+m2m
Proceeding on these lines, we get that
f(m)=2mf(0)+2m(1+2+3+⋯+m)=2mf(0)+m(m+1)22m=2mf(0)+m(m+1)2m−1
Hence, T(n)=nT(1)+n(log2(n)(1+log2(n))2)=Θ(nlog2n).


4. T (n) = 3T (n/3) + n/2 

Below is the solution:

nlog3(3)=1. So, n1=f(n)
This resembles case 2 of masters theorem T(n)=θ(nlogbalog2n)
thus, T(n)=θ(nlogn)

5. .T (n) = 7T (n/3) + n^2   

Below is the solution:

NA


